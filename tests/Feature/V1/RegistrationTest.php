<?php

namespace Tests\Feature\V1;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Notification;
use App\User;
use App\Notifications\UcodeRequest;
use Tests\Feature\V1\Setup\UserFactory;

class RegistrationTest extends TestCase
{
    use RefreshDatabase;

    public function setUp()
    {
        parent::setUp();
    
        \Artisan::call('db:seed', [
            '--class' => 'DefaultsSeeder'
        ]);

        \Artisan::call('db:seed', [
            '--class' => 'TestSeeder'
        ]);

        $this->beforeApplicationDestroyed(function () {
            $this->resetDatabaseTablesIncrements();
        });

        Notification::fake();
    }

    /**
     * Customer registration.
     */
    public function testCustomerRegistration()
    {
        $response = $this->json('POST', '/api/register', [
            'role_id' => '3', 
            'mobile' => '639123123123', 
        ]);

        $response->assertStatus(200);

        $user = User::where('mobile','639123123123')->first();

        $this->assertDatabaseHas('users', [
            'mobile' => '639123123123',
        ]);

        $this->assertDatabaseHas('user_role', [
            'user_id' => $user->id, 
            'role_id' => 3, 
        ]);
    }

    /**
     * Business account registration should also attach a customer role.
     */
    public function testBusinessAccountRegistration()
    {
        $response = $this->json('POST', '/api/register', [
            'role_id' => '4', // or 5
            'first_name' => 'My Fname', 
            'last_name' => 'My Lname', 
            'mobile' => '639123123123', 
            'email' => 'myEmail@self.com', 
            'username' => 'myusernameforme', 
            'password' => 'myPassword',
            'password_confirmation' => 'myPassword',
        ]);
        
        $response->assertStatus(200);

        $user = User::where('mobile','639123123123')->first();

        $this->assertDatabaseHas('users', [
            'mobile' => '639123123123',
        ]);

        $this->assertDatabaseHas('user_role', [
            'user_id' => $user->id, 
            'role_id' => 4, 
        ]);

        // check business account has the customer role autogenerated
        $this->assertDatabaseHas('user_role', [
            'user_id' => $user->id, 
            'role_id' => 3, // customer role
        ]);
    }

    /**
     * Test existing customer adding business account role.
     */
    public function testExistingCustomerRegisterAdditionalBusinessAccount()
    {
        $customer = (new UserFactory)->setRoles('customer')->create([ 'username' => null ]);

        $role_id = rand(4, 5);

        // prepare customer data
        $data = $customer->setAppends([])->makeHidden([ 'id', 'created_at', 'updated' ])->toArray();

        $response = $this->json('POST', '/api/register', array_merge($data, [
            'role_id' => $role_id, 
            'username' => 'testuser',
            'password' => 'testuser',
            'password_confirmation' => 'testuser',
        ]));

        $response->assertStatus(200);

        $this->assertDatabaseHas('users', [
            'id' => $customer->id, 
            'username' => 'testuser',
            'email' => $customer->email,
            'mobile' => $customer->mobile,
        ]);

        $this->assertDatabaseHas('user_role', [
            'user_id' => $customer->id, 
            'role_id' => $role_id, 
        ]);

        $this->assertDatabaseHas('user_role', [
            'user_id' => $customer->id, 
            'role_id' => 3, 
        ]);
    }

    /**
     * Test requesting of ucode.
     */
    public function testRequestUcode()
    {
        $mobile = '639123123123';
        $code = 1234;

        // check user must not exists
        $this->assertDatabaseMissing('users', [
            'mobile' => $mobile, 
        ]);

        // verification of mobile
        \Cache::shouldReceive('tags->remember')->andReturn($code);

        $response = $this->json('POST', '/api/request_code', [
            'mobile' => $mobile, 
        ]);

        $response->assertStatus(200);

        Notification::assertSentTo(
            new \App\User([ 'mobile' => $mobile,  ]),
            UcodeRequest::class,
            function ($notification, $channels) use ($code) {
                return $notification->code == $code;
            }
        );
    }

    /**
     * Test registration through request_code endpoint.
     */
    public function testAutoRegisterOnUcodeVerificationForCustomers()
    {
        $mobile = '639123123123';
        $code = 1234;

        // check user must not exists
        $this->assertDatabaseMissing('users', [
            'mobile' => $mobile, 
        ]);

        // verification of mobile
        \Cache::shouldReceive('tags->remember')->andReturn($code);

        $response = $this->json('POST', '/api/verify_account', [
            'mobile' => $mobile, 
            'verification_code' => $code, 
        ]);

        $response->assertStatus(200);

        $customer = User::where('mobile', $mobile)->first();

        // check customer record on DB
        $this->assertDatabaseHas('user_role', [
            'user_id' => $customer->id, 
            'role_id' => 3, 
            'verified' => 1, 
            'verified_at' => now()->toDateTimeString(), 
        ]);
    }

}
